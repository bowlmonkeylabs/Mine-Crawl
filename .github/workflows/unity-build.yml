name: Build actions üòé

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at 00:00
  workflow_dispatch:    # Allows you to run this workflow manually from the Actions tab
    inputs:
      targetPlatform:
        type: choice
        description: Target Platform
        options: 
        - Default
        - StandaloneWindows
        - StandaloneWindows64
        - StandaloneLinux64
        - StandaloneOSX
        - WebGL
        - iOS
        - Android
        - All
      alwaysSaveCaches:
        type: boolean
        description: "Save caches even if the build fails."
        default: false

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  log_params:
    name: Log parameters üë£
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        run: |
          echo "${{toJson(github)}}"

  check_prod:
    name: Check if main branch üö¶
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - id: should_run
        continue-on-error: true
        name: Check if we''re running on the main branch
        run: echo "Building to production on branch $GITHUB_REF"

  check_date:
    name: Check if new commits üóû
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v2
      
      - name: print latest_commit
        run: echo ${{ github.sha }}

      - id: should_run
        continue-on-error: true
        name: Check for commits since last release of "latest" tag
        if: ${{ github.event_name == 'schedule' }}
#         run: test -z $(git rev-list  --after="24 hours"  ${{ github.sha }}) && echo "::set-output name=should_run::false"
        run: test -z $(git rev-list latest..${{ github.sha }}) && echo "::set-output name=should_run::false"
  
  prepare_matrix:
    name: Prepare build params üìù
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Prepare target platform matrix üíΩ
        id: set-matrix
        run: |
          
          if [ ${{ github.event_name }} == 'workflow_dispatch' ]; then
            case ${{ github.event.inputs.targetPlatform }} in
              Default)
                matrix=$(echo '[{"targetPlatform":"StandaloneWindows64"},{"targetPlatform":"StandaloneLinux64"}]' | jq '.')
                ;;
              All)
                # matrix=$(echo '[{"targetPlatform":"StandaloneWindows"},{"targetPlatform":"StandaloneWindows64"},{"targetPlatform":"StandaloneLinux64"},{"targetPlatform":"StandaloneOSX"},{"targetPlatform":"WebGL"},{"targetPlatform":"iOS"},{"targetPlatform":"Android"}]' | jq '.')
                matrix=$(echo '[{"targetPlatform":"StandaloneWindows"},{"targetPlatform":"StandaloneWindows64"},{"targetPlatform":"StandaloneLinux64"},{"targetPlatform":"StandaloneOSX"},{"targetPlatform":"WebGL"},{"targetPlatform":"iOS"},{"targetPlatform":"Android"}]' | jq '.')
                ;;
              *)
                matrix=$(echo '[{"targetPlatform":"${{github.event.inputs.targetPlatform}}"}]' | jq '.')
                ;;
            esac
          else
            matrix=$(echo '[{"targetPlatform":"StandaloneWindows64"},{"targetPlatform":"StandaloneLinux64"}]' | jq '.')
          fi
          echo $matrix
          echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT
      
  build:
    name: Build üèó‚ú®
    runs-on: ubuntu-latest
    needs: [check_date,prepare_matrix]
    if: (needs.check_date.result == 'success' || needs.check_date.result == 'skipped')
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare_matrix.outputs.matrix)}}
    steps:
      # v Checkout (without LFS content, just pointers) v -------------------------------
      - name: Checkout repository ‚¨á
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          lfs: true
          token: ${{ secrets.REPOS_ACCESS_TOKEN }}
      # ^ Checkout  ^ -------------------------------
      
      - name: Test bundle version
        run: |
          echo $(./.scripts/lib/get-unity-bundle-version.sh)

      # v Git LFS v -------------------------------
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache üìÇüíæ
        uses: pat-s/always-upload-cache@v3.0.11
        id: cache-lfs
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
          restore-keys: |
            ${{ runner.os }}-lfs-

      - name: Git LFS Pull ‚¨á
        run: |
          git lfs pull
          git add .
          git reset --hard
          
      - name: Test LFS
        run: |
          wc -c Assets/Private/Plugins/Sirenix/Assemblies/NoEmitAndNoEditor/Sirenix.Utilities.dll
      # ^ Git LFS ^ -------------------------------
      
      # v Git annex v -------------------------------
      - name: Install git-annex
        run: |
          sudo apt-get update
          sudo apt-get install git-annex
          
      - name: Clone unversioned repo ‚¨á
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}-Unversioned
          path: Assets/Unversioned
          token: ${{ secrets.REPOS_ACCESS_TOKEN }}
          fetch-depth: 0
      
      - name: Test unversioned
        run: |
          cd Assets/Unversioned
          find . -type f | cut -d/ -f2 | sort | uniq -c
          cd ../..
          
      - name: Configure git credentials
        run: |
          git config --global user.email "bowlmonkeylabs@gmail.com"
          git config --global user.name bowlmonkeylabs

      - name: Configure Unversioned annex
        run: |
          cd Assets/Unversioned
          git annex init
          
      - name: Test Unversioned annex
        run: |
          cd Assets/Unversioned
          find . -type f | cut -d/ -f2 | sort | uniq -c
          git annex list "Epic Toon FX/Materials/Basics/glow5_ADD.mat"
          git annex info
          cat ./.git/annex/index
          
      - name: Enable annex special remotes
        run: |
          cd Assets/Unversioned
          git annex enableremote cloud-s3
          git annex enableremote cloud
          echo ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            
      - name: Restore Unversioned cache üìÇ
        uses: actions/cache/restore@v3
        id: cache-restore-unversioned
        with:
          path: Assets/Unversioned
          key: ${{ runner.os }}-UnversionedAssets-${{ hashFiles('Assets/Unversioned/.git/annex/index') }}
          restore-keys: |
            ${{ runner.os }}-UnversionedAssets
          
      - name: Sync Unversioned annex üîÅ
        run: |
          cd Assets/Unversioned
          git annex sync --content
          git annex unlock
          cd ../..
          
      - name: Save Unversioned cache üíæ
        id: cache-save-unversioned
        if: success() || (github.event_name == 'workflow_dispatch' && github.event.inputs.alwaysSaveCaches == 'true')
        uses: actions/cache/save@v3
        with:
          path: Assets/Unversioned
          key: ${{ runner.os }}-UnversionedAssets-${{ hashFiles('Assets/Unversioned/.git/annex/index') }}
#           key: ${{ runner.os }}-UnversionedAssets
          restore-keys: |
            ${{ runner.os }}-UnversionedAssets
      # ^ Git annex ^ -------------------------------

      # v Restore Unity caches v -------------------------------
      - name: Restore Library cache üìÇ
        id: cache-restore-library
        uses: actions/cache/restore@v3
        with:
          path: Library
          key: ${{ runner.os }}-Library-${{ matrix.targetPlatform }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-Library-${{ matrix.targetPlatform }}
            ${{ runner.os }}-Library

      - name: Restore "everything else" cache üìÇ
        id: cache-restore-everything-else
        uses: actions/cache/restore@v3
        with:
          path: |
            Temp
            Builds
            build
            obj
            *.csproj
          key: ${{ runner.os }}-EverythingElse-${{ matrix.targetPlatform }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-EverythingElse-${{ matrix.targetPlatform }}
            ${{ runner.os }}-EverythingElse
      # ^ Restore Unity caches ^ -------------------------------

      # v Game CI v -------------------------------
      - name: Test bundle version
        run: |
          echo $(./.scripts/lib/get-unity-bundle-version.sh)

      - name: Build project ‚öô
        id: unityBuild
        uses: game-ci/unity-builder@v2
        continue-on-error: true
        timeout-minutes: 30
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
#           versioning: Semantic
          allowDirtyBuild: true
          customParameters: -Development
          
      - name: Try delete Unity lock file üî®
        if: (steps.unityBuild.outcome == 'failure')
        continue-on-error: true
        run: |
          EXECUTING_USER=$(whoami)
          sudo rm -f ./Temp/UnityLockfile
          sudo rm -f ./Library/ArtifactDB-lock
          sudo rm -f ./Library/SourceAssetDB-lock

      - name: Build project retry üé≤
        uses: game-ci/unity-builder@v2
        if: (steps.unityBuild.outcome == 'failure')
        timeout-minutes: 120
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
  #           versioning: Semantic
          allowDirtyBuild: true
          customParameters: -Development
          
      - name: Test bundle version
        run: |
          echo $(.scripts/lib/get-unity-bundle-version.sh)
      # ^ Game CI ^ -------------------------------
          
      # v Upload build artifacts v -------------------------------
      - name: Own project directory
        run: |
          export executing_user=$(whoami)
          sudo chown "$executing_user" ./
          
      - name: Determine build name
        id: set-params
        run: |
          REPO_NAME=$(basename ${{ github.repository }})
          BUILD_NAME="${REPO_NAME}_${{matrix.targetPlatform}}"
          echo $BUILD_NAME
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "BUILD_NAME=$BUILD_NAME" >> $GITHUB_OUTPUT
          
#       - name: Zip build
#         id: zip-build
#         run: |
#           pwd
#           cd ./build/${{ matrix.targetPlatform }}
#           #ZIP_CONTENT_PATH="./build/${{ matrix.targetPlatform }}"
#           ZIP_FILE_PATH="../${{ steps.set-params.outputs.BUILD_NAME }}.zip"
#           #echo $ZIP_CONTENT_PATH
#           echo $ZIP_FILE_PATH
#           ls
#           zip -r "$ZIP_FILE_PATH" .
#           echo "ZIP_FILE_PATH=$ZIP_FILE_PATH" >> $GITHUB_OUTPUT
#           cd ../..

      - name: Upload build artifact üì¶
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.set-params.outputs.BUILD_NAME }}
#           path: ${{ steps.zip-build.outputs.ZIP_FILE_PATH }}
#           name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
          
      # ^ Upload build artifacts ^ -------------------------------
        
      # v Save Unity caches v -------------------------------
      - name: Save Library cache üíæ
        id: cache-save-library
        if: success() || (github.event_name == 'workflow_dispatch' && github.event.inputs.alwaysSaveCaches == 'true')
        uses: actions/cache/save@v3
        with:
          path: Library
          key: ${{ runner.os }}-Library-${{ matrix.targetPlatform }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-Library-${{ matrix.targetPlatform }}
            ${{ runner.os }}-Library
          
      - name: Save "everything else" cache üíæ
        id: cache-save-everything-else
        if: success() || (github.event_name == 'workflow_dispatch' && github.event.inputs.alwaysSaveCaches == 'true')
        uses: actions/cache/save@v3
        with:
          path: |
            Temp
            Builds
            build
            obj
            *.csproj
          key: ${{ runner.os }}-EverythingElse-${{ matrix.targetPlatform }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-EverythingElse-${{ matrix.targetPlatform }}
            ${{ runner.os }}-EverythingElse
      # ^ Save Unity caches ^ -------------------------------

  release:
    name: Release üéÅ
    needs: [check_prod,build]
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts ‚¨á
        uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: |
          pwd
          ls -R
          
      - name: Zip builds
        id: zip-builds
        run: |
          for f in *; do
            if [ -d "$f" ]; then
              # Will not run if no directories are available
              echo "$f"
              cd $f
              zip -r "../${f}.zip" .
              cd ..
            fi
          done
        
      - name: Release latest üì¶
        uses: softprops/action-gh-release@v1
        with:
          tag_name: latest
          name: latest (unstable)
          prerelease: true
          generate_release_notes: true
          files: |
            *.zip
