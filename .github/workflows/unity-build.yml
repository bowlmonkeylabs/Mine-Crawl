name: Build actions ðŸ˜Ž

on:
  # Triggers the workflow on push or pull request events but only for the main branch
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      targetPlatform:
        type: choice
        description: Target Platform
        options: 
        - All
        - StandaloneWindows
        - StandaloneWindows64
        - StandaloneLinux64
        - StandaloneOSX
        - WebGL
        #- iOS
        #- Android
  schedule:
    - cron: '0 0 * * *' # runs daily at 00:00

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  check_prod:
    name: Check if main branch
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - id: should_run
        continue-on-error: true
        name: Check if we''re running on the main branch
        run: echo "Building to production on branch $GITHUB_REF"

  check_date:
    name: Check if recent commits
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v2
      
      - name: print latest_commit
        run: echo ${{ github.sha }}

      - id: should_run
        continue-on-error: true
        name: check latest commit is less than a day
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list  --after="24 hours"  ${{ github.sha }}) && echo "::set-output name=should_run::false"
        
  prepare_matrix:
    name: Prepare target platform matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          if [ github.event_name == 'workflow_dispatch' ]; then
            case ${{github.event.inputs.targetPlatform}} in
              All)
                #matrix=$(echo '[{"targetPlatform":"StandaloneOSX"},{"targetPlatform":"StandaloneWindows"},{"targetPlatform":"StandaloneWindows64"},{"targetPlatform":"StandaloneLinux64"}]' | jq '.')
                matrix=$(echo '[{"targetPlatform":"StandaloneWindows64"},{"targetPlatform":"StandaloneLinux64"}]' | jq '.')
                ;;
              *)
                matrix=$(echo '[{"targetPlatform":"${github.event.inputs.targetPlatform}"}]' | jq '.')
                ;;
            esac
          else
            matrix=$(echo '[{"targetPlatform":"StandaloneWindows64"},{"targetPlatform":"StandaloneLinux64"}]' | jq '.')
          fi
          echo $matrix
          echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT
      
  build:
    name: Build my project âœ¨
    runs-on: ubuntu-latest
    needs: [check_prod,check_date,prepare_matrix]
    if: |
      (success() || failure()) &&
      (needs.check_date.result == 'success' || needs.check_date.result == 'success')
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare_matrix.outputs.matrix)}}
    steps:
      # Checkout (without LFS content, just pointers)
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          lfs: true
          token: ${{ secrets.REPOS_ACCESS_TOKEN }}

      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: pat-s/always-upload-cache@v3.0.11
        id: cache-lfs
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
          restore-keys: |
            ${{ runner.os }}-lfs-

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
          
      - name: Test LFS
        run: |
          wc -c Assets/Private/Plugins/Sirenix/Assemblies/NoEmitAndNoEditor/Sirenix.Utilities.dll
          
      # Git annex
      - name: Install git-annex
        run: |
          sudo apt-get update
          sudo apt-get install git-annex
          
      - name: Clone unversioned repo
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}-Unversioned
          path: Assets/Unversioned
          token: ${{ secrets.REPOS_ACCESS_TOKEN }}
          fetch-depth: 0
      
      - name: Test unversioned
        run: |
          cd Assets/Unversioned
          find . -type f | cut -d/ -f2 | sort | uniq -c
          cd ../..
          
      - name: Configure git credentials
        run: |
          git config --global user.email "bowlmonkeylabs@gmail.com"
          git config --global user.name bowlmonkeylabs

      - name: Configure unversioned annex
        run: |
          cd Assets/Unversioned
          git annex init
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
      - name: Test unversioned annex
        run: |
          cd Assets/Unversioned
          find . -type f | cut -d/ -f2 | sort | uniq -c
          git annex list "Epic Toon FX/Materials/Basics/glow5_ADD.mat"
          git annex info
          
      - name: Enable annex special remotes
        run: |
          cd Assets/Unversioned
          git annex enableremote cloud-s3
          git annex enableremote cloud
          echo ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
      - name: Cache unversioned
        uses: pat-s/always-upload-cache@v3.0.11
        id: cache-unversioned
        with:
          path: Assets/Unversioned
          # key: ${{ runner.os }}-UnversionedAssets-${{ hashFiles('Assets/Unversioned/.git/annex/index') }}
          key: ${{ runner.os }}-UnversionedAssets-${{ hashFiles('Assets/Unversioned/.git/annex/index') }}
          restore-keys: |
            ${{ runner.os }}-UnversionedAssets-
          
      - name: Sync unversioned annex
        run: |
          cd Assets/Unversioned
          git annex sync --content
          git annex unlock
          cd ../..

      # Unity cache
      - name: Cache library
        uses: pat-s/always-upload-cache@v3.0.11
        id: cache-library
        with:
          path: Library
          key: ${{ runner.os }}-Library
          restore-keys: |
            ${{ runner.os }}-Library

      # Test
#       - name: Run tests
#         uses: game-ci/unity-test-runner@v2
#         env:
#           UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#         with:
#           githubToken: ${{ secrets.GITHUB_TOKEN }}

      # Build
      - name: Build project
        id: unityBuild
        uses: game-ci/unity-builder@v2
        timeout-minutes: 30
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          allowDirtyBuild: true
          customParameters: -Development
          
      - name: Try delete Unity lock file
        if: (success() || failure()) && (steps.unityBuild.outcome == 'failure')
        continue-on-error: true
        run: |
          ls ./Temp
          rm ./Temp/UnityLockfile
          
      # Build
      - name: Build project retry
        uses: game-ci/unity-builder@v2
        #if: ${{ failure() }}
        if: (success() || failure()) && (steps.unityBuild.outcome == 'failure')
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneWindows64
          allowDirtyBuild: true
          customParameters: -Development
          
      # Build with Retry  
#       - name: Build project with Retry
#         uses: Wandalen/wretry.action@master
#         env:
#           UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#           UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#           UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#         with:
#           action: game-ci/unity-builder@v2
#           with: |
#             targetPlatform: StandaloneWindows64
#             customParameters: -Development
#           attempt_limit: 2
#           attempt_delay: 1800000
          
      - name: Own project directory
        run: |
          export executing_user=$(whoami)
          sudo chown "$executing_user" ./

      # Output
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: Build
          path: build
          
      - name: Release latest
        if: (needs.check_prod.result == 'success' || needs.check_prod.result == 'skipped')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: latest
          name: latest (unstable)
          prerelease: true
          generate_release_notes: true
          files: |
            build/*
          
