name: Build actions ðŸ˜Ž

on:
  # Triggers the workflow on push or pull request events but only for the main branch
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build:
    name: Build my project âœ¨
    runs-on: ubuntu-latest
    steps:
      # Checkout (without LFS content, just pointers)
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          lfs: true
          token: ${{ secrets.REPOS_ACCESS_TOKEN }}

      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: pat-s/always-upload-cache@v3.0.11
        id: cache-lfs
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
          restore-keys: |
            ${{ runner.os }}-lfs-

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
          
      - name: Test LFS
        run: |
          wc -c Assets/Private/Plugins/Sirenix/Assemblies/NoEmitAndNoEditor/Sirenix.Utilities.dll
          
      # Git annex
      - name: Install git-annex
        run: |
          sudo apt-get update
          sudo apt-get install git-annex
          
      - name: Clone unversioned repo
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}-Unversioned
          path: Assets/Unversioned
          token: ${{ secrets.REPOS_ACCESS_TOKEN }}
          fetch-depth: 0
      
      - name: Test unversioned
        run: |
          cd Assets/Unversioned
          find . -type f | cut -d/ -f2 | sort | uniq -c
          cd ../..
          
#       - name: Cache unversioned
#         uses: pat-s/always-upload-cache@v3.0.11
#         id: cache-unversioned
#         with:
#           path: Assets/Unversioned
#           key: ${{ runner.os }}-UnversionedAssets-${{ hashFiles('Assets/Unversioned/.git/annex/index') }}
#           restore-keys: |
#             ${{ runner.os }}-UnversionedAssets-
          
      - name: Configure git credentials
        run: |
          git config --global user.email "bowlmonkeylabs@gmail.com"
          git config --global user.name bowlmonkeylabs

      - name: Configure unversioned annex
        run: |
          cd Assets/Unversioned
          git annex init
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
      - name: Test unversioned annex
        run: |
          cd Assets/Unversioned
          find . -type f | cut -d/ -f2 | sort | uniq -c
          git annex list "Epic Toon FX/Materials/Basics/glow5_ADD.mat"
          git annex info
          
      - name: Enable annex special remotes
        run: |
          cd Assets/Unversioned
          git annex enableremote cloud-s3
          git annex enableremote cloud
          echo ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
      - name: Sync unversioned annex
        run: |
          cd Assets/Unversioned
          git annex sync --content
          git annex unlock

      # Unity cache
      - name: Cache library
        uses: pat-s/always-upload-cache@v3.0.11
        id: cache-library
        with:
          path: Library
          key: ${{ runner.os }}-Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            ${{ runner.os }}-Library-

      # Test
#       - name: Run tests
#         uses: game-ci/unity-test-runner@v2
#         env:
#           UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#         with:
#           githubToken: ${{ secrets.GITHUB_TOKEN }}

      # Build
      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneWindows64
          customParameters: -Development
          
      - name: Own project directory
        run: |
          export executing_user=$(whoami)
          sudo chown "$executing_user" ./

      # Output
      - uses: actions/upload-artifact@v3
        with:
          name: Build
          path: build
